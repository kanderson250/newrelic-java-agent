name: Unit Tests

on:
  pull_request:
    branches: [ main ] ## branches TBD
    types: [opened, synchronize, reopened, ready_for_review] ## Types TBD
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  # Use context values as : ${{ github.event.inputs.BRANCH }}
  # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
  workflow_dispatch:
    inputs:
      BRANCH:
        description: "Specify branch (main is default)"
        required: false
        default: 'main'
# A workflow run is made up of one or more jobs. Jobs run in parallel by default.
jobs:
  unit-test:
    name: Unit Tests on JRE ${{ matrix.java-version }}
    timeout-minutes: 120
    runs-on: ubuntu-20.04
    env:
      default-branch: "main"
      # we use this in env var for conditionals (secrets can't be used in conditionals)
      GRADLE_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
    strategy:
      # max-parallel: 1 ## used to force sequential vs. concurrent
      fail-fast: false
      matrix:
        java-version: [8, 11, 17, 19]
    steps:
      - uses: actions/checkout@v3
      #- uses: gradle/wrapper-validation-action@v1.0.4

      - name: Set up Java 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Save JAVA_HOME as JDK8 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Save JAVA_HOME as JDK11 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk11=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Save JAVA_HOME as JDK17 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk17=$JAVA_HOME" >> $GITHUB_ENV

      # Install latest non-LTS Java version (we should only ever test one non-LTS version to keep test times reasonable)
      - name: Set up Java 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 19

      - name: Save JAVA_HOME as JDK19 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk19=$JAVA_HOME" >> $GITHUB_ENV

      - name: Check environmental variables
        run: printenv | sort -f

      - name: Set gradle.properties
        run: |
          sed -i -e "s|jdk8=8|jdk8=${ORG_GRADLE_PROJECT_jdk8}|
          s|jdk11=11|jdk11=${ORG_GRADLE_PROJECT_jdk11}|
          s|jdk17=17|jdk17=${ORG_GRADLE_PROJECT_jdk17}|
          s|jdk19=19|jdk19=${ORG_GRADLE_PROJECT_jdk19}|" gradle.properties.gha
          cat gradle.properties.gha
          rm gradle.properties
          mv gradle.properties.gha gradle.properties

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run unit tests for each Java version as defined in the matrix
        if: ${{ env.GRADLE_KEY != '' }}
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 34.229.76.228=${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          JRE: jre${{ matrix.java-version }}
          LANGUAGE: polyglot
          TEST_TYPE: unit
        run: |
          ./gradlew --console=plain --parallel test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue --scan -Dscan.uploadInBackground=false --build-cache
        
      - name: Run unit tests for each Java version as defined in the matrix no build scan or cache
        if: ${{ env.GRADLE_KEY == '' }}
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          echo "*** NOT PUBLISHING BUILD SCANS ***"
          ./gradlew --console=plain --parallel test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue

      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'
          path: 'gh-pages'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@users.noreply.github.com"

      - name: Copy build reports
        if: ${{ failure() }}
        run: |
          mkdir -p gh-pages/reports/${{ inputs.BRANCH }}/${{ github.run_id }}/unit-test-results-java-${{ matrix.java-version }}
          cp **/build/reports/tests/* gh-pages/reports/${{ inputs.BRANCH }}/${{ github.run_id }}/unit-test-results-java-${{ matrix.java-version }}

      - name: Set up python for scripts
        if: ${{ failure() }}
        uses: actions/setup-python@v3

      - name: Generate landing page for test results
        if: ${{ failure() }}
        run: |
          python gh-pages/ghpages_utils/getFailures.py gh-pages/reports/${{ inputs.BRANCH }}/${{ github.run_id }}/unit-tests-results-java-${{ matrix.java-version }}

      - name: Commit and push test reports to gh-pages
        if: ${{ failure() }}
        run: |
          cd gh-pages
          git add -f reports/*
          git commit -m "Update test reports for ${{ matrix.java-version }}"
          git pull --rebase
          git push -f
      

  indexFiles:
    if: ${{ failure() }}
    name: Create Index Files
    needs: unit-test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'
          path: 'gh-pages'

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@users.noreply.github.com"

      - name: Set up python
        uses: actions/setup-python@v3

      - name: Write index files
        run: |
          python gh-pages/ghpages_utils/generateIndexFile.py gh-pages/reports/${{ inputs.BRANCH }}/${{ github.run_id }}
          python gh-pages/ghpages_utils/generateIndexFile.py gh-pages/reports/${{ inputs.BRANCH }}

      - name: Add date files
        run: |
          echo $(date -u +%s) > gh-pages/reports/${{ inputs.BRANCH }}/date.txt
          echo $(date -u +%s) > gh-pages/reports/${{ inputs.BRANCH }}/${{ github.run_id }}/date.txt

      - name: Commit and push test reports to gh-pages
        run: |
          cd gh-pages
          git add -f reports/*
          git commit -m "Update index files for test reports."
          git pull --rebase
          git push -f   

      - name: Gh Pages Summary
        run: |
          echo "[View test reports](https://kanderson250.github.io/newrelic-java-agent/reports/${{ env.BRANCH_NAME }}/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

