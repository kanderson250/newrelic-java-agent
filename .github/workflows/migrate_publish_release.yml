name: Test migration workflow

on:
  workflow_dispatch:
    inputs:
      agent-ref:
        description: "Specify agent branch/tag/sha (main is default)"
        required: false
        default: 'main'

jobs:
  publish_release:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Agent
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # pin@v4
        with:
          ref: ${{ inputs.agent-ref || 'main' }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment

#      - name: Publish release
#        env:
#          SONATYPE_USERNAME: ${{ secrets.MIGRATION_TEST_SONATYPE_USERNAME }}
#          SONATYPE_PASSWORD: ${{ secrets.MIGRATION_TEST_SONATYPE_PASSWORD }}
#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
#          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
#          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
#        run: ./gradlew $GRADLE_OPTIONS publish -x :newrelic-scala3-api:publish -x :newrelic-scala-api:publish -x :newrelic-scala-cats-api:publish -x :newrelic-cats-effect3-api:publish -x :newrelic-scala-zio-api:publish -x :newrelic-scala-zio2-api:publish -x :agent-bridge:publish -x :agent-bridge-datastore:publish -x :newrelic-weaver:publish -x :newrelic-weaver-api:publish -x :newrelic-weaver-scala:publish -x :newrelic-weaver-scala-api:publish -x :newrelic-opentelemetry-agent-extension:publish -Prelease=true
      - name: Publish release scala apis
        env:
          SONATYPE_USERNAME: ${{ secrets.MIGRATION_TEST_SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.MIGRATION_TEST_SONATYPE_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
#        run: ./gradlew $GRADLE_OPTIONS :newrelic-scala3-api:publish :newrelic-scala-api:publish :newrelic-scala-cats-api:publish :newrelic-cats-effect3-api:publish :newrelic-scala-zio-api:publish :newrelic-scala-zio2-api:publish -Prelease=true
        run: ./gradlew $GRADLE_OPTIONS :newrelic-scala3-api:publish -Prelease=true
#      - name: Publish apis for Security agent
#        env:
#          SONATYPE_USERNAME: ${{ secrets.MIGRATION_TEST_SONATYPE_USERNAME }}
#          SONATYPE_PASSWORD: ${{ secrets.MIGRATION_TEST_SONATYPE_PASSWORD }}
#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
#          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
#          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
#        run: ./gradlew $GRADLE_OPTIONS :agent-bridge:publish :agent-bridge-datastore:publish :newrelic-weaver:publish :newrelic-weaver-api:publish :newrelic-weaver-scala:publish :newrelic-weaver-scala-api:publish -Prelease=true
#      - name: Publish New Relic OpenTelemetry API Extension
#        env:
#          SONATYPE_USERNAME: ${{ secrets.MIGRATION_TEST_SONATYPE_USERNAME }}
#          SONATYPE_PASSWORD: ${{ secrets.MIGRATION_TEST_SONATYPE_PASSWORD }}
#          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
#          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
#          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
#        run: ./gradlew $GRADLE_OPTIONS :newrelic-opentelemetry-agent-extension:publish -Prelease=true

      - name: Upload staged artifacts to Central Sonatype
        env:
          SONATYPE_USERNAME: ${{ secrets.MIGRATION_TEST_SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.MIGRATION_TEST_SONATYPE_PASSWORD }}
        run: |
          # token is a b64-encoded string of username:password, used in auth header of API call
          SONATYPE_TOKEN=$(printf "$SONATYPE_USERNAME:$SONATYPE_PASSWORD" | base64)
          PUBLISH_NAMESPACE="io.github.kanderson250"
          # makes a curl request to ossrh-staging-api to upload everything to Central Sonatype
          echo "Uploading artifacts from OSSRH-Staging to Central Sonatype..."
          # captures response code and body of curl request
          RESPONSE=$(curl -s -w "%{http_code}" -o response_body.txt -X POST \
            -H "Authorization: Bearer $SONATYPE_TOKEN" \
            "https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/$PUBLISH_NAMESPACE?publishing_type=user_managed")
          # job fails if we got anything back but a 200
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Failed to upload artifacts to Central Sonatype. Response code: $RESPONSE. Response body: "
            cat response_body.txt
            echo "Visit https://central.sonatype.com/publishing/deployments for more information."
            exit 1
          else
            echo "Artifacts were uploaded successfully to Central Sonatype."
            echo "Visit https://central.sonatype.com/publishing/deployments to view your artifacts."
          fi

#  upload_release_to_sonatype:
#    needs: publish_release
#    runs-on: ubuntu-24.04
#    steps:
#      - name: Upload staged artifacts to Central Sonatype
#        env:
#          SONATYPE_USERNAME: ${{ secrets.MIGRATION_TEST_SONATYPE_USERNAME }}
#          SONATYPE_PASSWORD: ${{ secrets.MIGRATION_TEST_SONATYPE_PASSWORD }}
#        run: |
#          # token is a b64-encoded string of username:password, used in auth header of API call
#          SONATYPE_TOKEN=$(printf "$SONATYPE_USERNAME:$SONATYPE_PASSWORD" | base64)
#          PUBLISH_NAMESPACE="io.github.kanderson250"
#          # makes a curl request to ossrh-staging-api to upload everything to Central Sonatype
#          echo "Uploading artifacts from OSSRH-Staging to Central Sonatype..."
#          # captures response code and body of curl request
#          RESPONSE=$(curl -s -w "%{http_code}" -o response_body.txt -X POST \
#            -H "Authorization: Bearer $SONATYPE_TOKEN" \
#            "https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/$PUBLISH_NAMESPACE?publishing_type=user_managed")
#          # job fails if we got anything back but a 200
#          if [ "$RESPONSE" -ne 200 ]; then
#            echo "Failed to upload artifacts to Central Sonatype. Response code: $RESPONSE. Response body: "
#            cat response_body.txt
#            echo "Visit https://central.sonatype.com/publishing/deployments for more information."
#            exit 1
#          else
#            echo "Artifacts were uploaded successfully to Central Sonatype."
#            echo "Visit https://central.sonatype.com/publishing/deployments to view your artifacts."
#          fi